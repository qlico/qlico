{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Qlico Documentation","text":"<p>Qlico is an open-source project designed to simplify running your web projects inside Docker. At its core, it is a set of configuration files intended to streamline the development process for teams by providing a hassle-free Docker stack.</p>"},{"location":"#why-choose-qlico","title":"Why Choose Qlico?","text":"<ul> <li>Easy Configuration: Select only the parts/services you need.</li> <li>Customizable: Use and extend your own configuration files effortlessly.</li> <li>User-Friendly: Maintains the default <code>docker compose</code> experience with   enhanced testing.</li> <li>Team Collaboration: Standardize configurations across projects (   e.g., <code>postgres17</code> for PostgreSQL 17, <code>mysql9</code> for MySQL 9).</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker &gt;= 26.0</li> <li>dnsmasq (optional, but recommended)</li> <li>Basic knowledge of Docker and Docker Compose</li> </ul> <p>For beginners:</p> <ul> <li>Docker Get Started (Skip \"Share the application part\" as Docker Hub account is not needed)</li> <li>Docker for Beginners (Skip all AWS parts, because it's using Elastic Beanstalk)</li> </ul>"},{"location":"#best-docker-experience","title":"Best Docker Experience","text":"<ul> <li>Windows: Docker Desktop with WSL2.</li> <li>macOS: OrbStack</li> <li>Linux:<ul> <li>Arch Linux, see this excellent wiki page</li> <li>Ubuntu</li> <li>Debian</li> <li>CentOS</li> <li>Fedora</li> </ul> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using Qlico, please refer to the Quick Start Guide.</p>"},{"location":"#history","title":"History","text":"<p>Qlico began in 2017 as a side project to manage multiple Dockerfiles for various PHP versions. Initially, all projects were mounted inside a single webserver, leading to performance issues on macOS and difficulties in managing PHP versions per project. To overcome these challenges, Tom created a new, more efficient Docker stack, and Qlico was born.</p>"},{"location":"#the-name-qlico","title":"The Name Qlico","text":"<p>The name Qlico is derived from \"Kliko,\" a term for plastic trash cans in the Netherlands, symbolizing the use of \"containers\" in Docker/Kubernetes.</p> <p>\"There are only two hard things in Computer Science: cache invalidation and naming things.\" -- Phil Karlton</p> <p>Picture of Kliko's</p>"},{"location":"#qlico-in-production","title":"Qlico in Production","text":"<p>Qlico is suitable for both development and production environments.  Use the <code>prod</code> stage of the <code>Dockerfile</code> for production deployment.  Many companies successfully run Qlico in production within Kubernetes clusters.  For assistance, contact Tom or start a GitHub Discussion.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Qlico is open-source, and contributions are welcome! Fork the project, make a Pull Request, or create an Issue for any problems, including typos and grammar improvements.</p>"},{"location":"#license","title":"License","text":"<p>Qlico is licensed under the MIT License with one exception: The name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization of the copyright holder.</p>"},{"location":"#stargazers","title":"Stargazers","text":"<p>If you enjoy using Qlico, please star the Qlico GitHub project.</p>"},{"location":"dnsmasq/","title":"dnsmasq","text":"<p>dnsmasq provides a DNS server, a DHCP server with support for DHCPv6 and PXE, and a TFTP server. It is designed to be lightweight and have a small footprint, suitable for resource constrained routers and firewalls. dnsmasq can also be configured to cache DNS queries for improved DNS lookup speeds to previously visited sites.</p> <p>We will be only using the DNS server, to resolve <code>*.qlico</code> to your docker bridge network.</p>"},{"location":"dnsmasq/#linux","title":"Linux","text":"<p>At the moment the Linux installation has been tested with &gt;= Ubuntu 18.04.</p> <p>First open the <code>/etc/NetworkManager/NetworkManager.conf</code> file with your favourite text editor, make sure you'll have <code>sudo</code> rights.</p> <p>Under <code>[main]</code> add: <code>dns=dnsmasq</code>.</p> <p>Now we need to tell our Operating System to use the <code>resolv.conf</code> created by NetworkManager, we'll move the old <code>resolv.conf</code> to <code>resolv.conf.old</code> and create a symlink to the one created by NetworkManager.</p> <pre><code>sudo mv /etc/resolv.conf /etc/resolv.conf.old\nsudo ln -s /var/run/NetworkManager/resolv.conf /etc/resolv.conf\n</code></pre> <p>Now we'll need the IP address of your Docker bridge network, we will use this IP address in the next step.</p> <pre><code>ip addr show docker0 | grep \"inet\\b\" | awk '{print $2}' | cut -d/ -f1\n</code></pre> <p>Now it's time to create a new dnsmasq configuration:</p> <p>Use the IP address, you've received from the previous step (for example: <code>172.17.0.1</code>), and place it in this line: <code>address=/qlico/172.17.0.1</code></p> <p>Open the file: <code>/etc/NetworkManager/dnsmasq.d/qlico</code> with your favourite text editor, make sure you'll have <code>sudo</code> rights. And add the following to the file, make sure you'll replace the IP address with the IP address from the previous step (if it's different).</p> <pre><code>domain-needed\nbogus-priv\nstrict-order\n\naddress=/qlico/172.17.0.1\n\nlisten-address=::1,127.0.0.1\n</code></pre> <p>Finally, reload NetworkManager</p> <pre><code>sudo systemctl reload NetworkManager.service\n</code></pre>"},{"location":"dnsmasq/#macos","title":"macOS","text":"<p>To use dnsmasq on macOS we need to install it first, make sure you have homebrew installed.</p> <p>After that open your favourite Terminal, and run the following commands.</p> <pre><code>brew install dnsmasq\n</code></pre> <p>Get the IP address of Docker for Mac.</p> <pre><code>docker run --rm -it alpine:latest nslookup host.docker.internal\n</code></pre> <p>Use the IP adress from:</p> <pre><code>Non-authoritative answer:\nName:   host.docker.internal\nAddress: 192.168.64.1\n</code></pre> <pre><code># Create a configuration folder\nmkdir -pv $(brew --prefix)/etc/\n\n# Create a dnsmasq configuration file\nvim $(brew --prefix)/etc/dnsmasq.conf\n</code></pre> <p>Paste the following inside the file (remember to change the IP address when it's different):</p> <pre><code>address=/qlico/192.168.64.1\nlisten-address=127.0.0.1\nport=35353\n</code></pre> <p>Finish with by running the following commands</p> <pre><code># Always start dnsmasq when starting macOS.\nsudo brew services start dnsmasq\n\n# Create a dns resolver directory\nsudo mkdir -v /etc/resolver\n\n# Tell the resolver to use the local installed dnsmasq for the qlico tld. \nsudo bash -c 'echo \"nameserver 127.0.0.1\nport 35353\" &gt; /etc/resolver/qlico'\n</code></pre>"},{"location":"dnsmasq/#m1-chip","title":"M1 chip","text":"<p>When using a MacBook with a M1 processor a workaround is required in order to be able to access docker containers from your local environment.</p> <pre><code># Create a network alias to the localloopback ip\n# (this is required after every reboot)\nsudo ifconfig lo0 alias 10.254.254.254 255.255.255.0\n\n# Edit the dnsmasq configuration file\nsudo vim  $(brew --prefix)/etc/dnsmasq.conf\n</code></pre> <p>Replace the ip address you entered during the macOS setup above with the alias you created in the previous step.</p> <pre><code>address=/qlico/10.254.254.254\n</code></pre> <p>Restart dnsmasq <pre><code>brew services stop dnsmasq\nbrew services start dnsmasq\n</code></pre></p>"},{"location":"dnsmasq/#windows","title":"Windows","text":"<p>Unfortunately dnsmasq is not available for Windows, if you have alternatives please contribute to the documentation.</p>"},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#cloning-the-repo","title":"Cloning the repo","text":"<p>Clone the Qlico repository as <code>qlico-core</code>, after cloning enter the <code>qlico-core</code> folder, copy <code>docker-compose.yaml</code> and <code>.env.dist</code> from the <code>dist</code> folder to the mainroot of <code>qlico-core</code>. (you can also run the following commands on your favourite terminal)</p> <pre><code>git clone https://github.com/qlico/qlico.git qlico-core\ncd qlico-core\ncp dist/.env.dist .env\ncp dist/docker-compose.yaml docker-compose.yaml\n</code></pre> <p>By default, Qlico only comes with a reverse proxy Traefik, if you would like more services use the Examples, for example Valkey see the Examples/Valkey. If you're missing a service, feel free to contribute!</p> <p>After customizing to your needs, you can do a <code>docker compose up</code> inside the <code>qlico-core</code> folder.</p> <p>Congratulations, you're now running <code>qlico-core</code>.</p> <p>More information about Qlico architecture can be found in the Qlico architecture page.</p>"},{"location":"quick-start/#adding-qlico-to-your-existing-projects-nginx-default","title":"Adding Qlico to your (existing) project(s) - NGINX (default)","text":"<p>To start using Qlico, you'll need a <code>qlico</code> folder and <code>Dockerfile</code> inside your (existing) project. You can find these files in the project-examples directory.</p> <ol> <li>Copy the <code>project/examples/qlico</code> folder (with all the files) to the (new or existing) project folder.</li> <li>Copy the <code>projects/examples/Dockerfile</code> to the root of the project folder.</li> <li>Copy the <code>qlico/.env.dist</code> to the <code>qlico</code> folder and rename it to <code>.env</code>.</li> <li>Edit the <code>.env</code> file to your needs.</li> </ol>"},{"location":"quick-start/#adding-qlico-to-your-existing-projects-apache2","title":"Adding Qlico to your (existing) project(s) - Apache2","text":"<p>To start using Qlico, you'll need a <code>qlico</code> folder and <code>Dockerfile</code> inside your (existing) project. You can find these files in the project-examples directory.</p> <ol> <li>Copy the <code>project/examples/qlico-apache2</code> folder (with all the files) to the (new or existing) project folder as <code>qlico</code>, so make sure to rename <code>qlico-apache</code> to <code>qlico</code>.</li> <li>Copy the <code>Dockerfile</code> to the root of the project folder.</li> <li>Copy the <code>qlico/.env.dist</code> to the <code>qlico</code> folder and rename it to <code>.env</code>.</li> <li>Edit the <code>.env</code> file to your needs.</li> </ol> <p>Note</p> <p>Since PHP 8.3 we've renamed <code>Dockerfile.phpX</code> to <code>Dockerfile</code>, you can edit the <code>Dockerfile</code> for the version you want. We've also added connecting through a unix socket, instead of a port.</p>"},{"location":"quick-start/#add-remove-php-extensions","title":"Add / remove PHP extensions","text":"<p>Since the PHP 8.3 we've started using docker-php-extension-installer by Michele Locati.</p> <p>If you want to add or remove an PHP extension, please see the Supported PHP extensions.</p> <p>In your <code>Dockerfile</code> search for the following part, and remove/add PHP extensions you would like to use. We recommended to use the <code>-stable</code> suffix, to make sure you're using a stable version of the PHP extension.</p> <p>For example:</p> <p>Edit <code>Dockerfile</code></p> <p>Before: Dockerfile<pre><code>    &amp;&amp; install-php-extensions \\\n            APCu-stable \\\n            bcmath-stable \\\n</code></pre> If you want to add <code>imagick</code> and remove <code>bcmath</code> you can change it to:</p> <p>After: Dockerfile<pre><code>    &amp;&amp; install-php-extensions \\\n            APCu-stable \\\n            imagick-stable \\\n</code></pre></p> <p>Note: There are multiple stages inside the Dockerfile, if you want to run Qlico in production with for example (Datadog profiling), you'll only need to change the <code>install-php-extensions</code> in the <code>prod</code> stage.</p> <p>Please keep in mind, we're not maintaining the PHP extensions, so if an PHP extension if not working, please do not open an issue in this repository.</p>"},{"location":"quick-start/#how-do-i-connect-to-services-running-in-qlico-core","title":"How do I connect to services running in <code>qlico-core</code>?","text":"<p>In this example we will use <code>postgres17</code> as an example service, based on postgresql 17 example.</p>"},{"location":"quick-start/#from-your-host-machine","title":"From your host machine","text":"<p>You can connect to a service if you open the port in the <code>docker-compose.yaml</code> file, you can open the port by adding the following line to the service:</p> qlico-core/docker-compose.yaml<pre><code>services:\n  postgres17:\n    image: postgres:17-alpine\n    ports:\n      - 5432:5432\n</code></pre> <p>So in this example would connect to: <code>localhost:5432</code> to access the service.</p>"},{"location":"quick-start/#from-a-container","title":"From a container","text":"<p>You can connect to services running in <code>qlico-core</code> by using the service name, for example, if you have a service called <code>postgres17</code> you can connect to it by using <code>postgres17</code> as the hostname.</p> qlico-core/docker-compose.yaml<pre><code>services:\n  postgres17:\n    image: postgres:17-alpine\n</code></pre>"},{"location":"quick-start/#dnsmasq","title":"dnsmasq","text":"<p>For the best Qlico experience please install dnsmasq, it's not mandatory, you can also use a <code>/etc/hosts</code> file.</p>"},{"location":"examples/adminer/","title":"Adminer configuration example","text":""},{"location":"examples/adminer/#about-adminer","title":"About Adminer","text":"<p>Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. Conversely, to phpMyAdmin, it consists of a single file ready to deploy to the target server. Adminer is available for MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch, MongoDB and others via plugin.</p>"},{"location":"examples/adminer/#more-information-about-adminer","title":"More information about Adminer","text":"<ul> <li>Adminer website</li> <li>Adminer on Docker Hub</li> </ul>"},{"location":"examples/adminer/#how-to-add-adminer-to-qlico","title":"How to add Adminer to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  adminer:\n    image: adminer:5.4.1-standalone\n    container_name: qlico-core_adminer\n    labels:\n      - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\"\n      - \"traefik.http.services.adminer.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n</code></pre>"},{"location":"examples/adminer/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Adminer service.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  adminer:\n    image: adminer:5.4.1-standalone\n    container_name: qlico-core_adminer\n    labels:\n      - \"traefik.http.routers.adminer.rule=Host(`adminer.qlico`)\"\n      - \"traefik.http.services.adminer.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/blackfire/","title":"Blackfire configuration example","text":""},{"location":"examples/blackfire/#about-blackfire","title":"About Blackfire","text":"<p>Blackfire.io makes it possible to write performance tests, automate test scenarios, and drill down to the finest details whenever performance issues arise. Teams can collaborate on performance testing in all environments: development, testing, staging and production.</p>"},{"location":"examples/blackfire/#more-information-about-blackfire","title":"More information about Blackfire","text":"<ul> <li>Blackfire website</li> <li>Blackfire on Docker Hub</li> </ul>"},{"location":"examples/blackfire/#how-to-add-blackfire-to-qlico","title":"How to add Blackfire to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  blackfire:\n    image: blackfire/blackfire:2\n    container_name: qlico-core_blackfire\n    env_file:\n      - .env\n    networks:\n      - qlico-core\n</code></pre>"},{"location":"examples/blackfire/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Blackfire service.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  blackfire:\n    image: blackfire/blackfire:2\n    container_name: qlico-core_blackfire\n    env_file:\n      - .env\n    networks:\n      - qlico-core\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/elasticsearch-kibana/","title":"Elasticsearch and Kibana configuration example","text":""},{"location":"examples/elasticsearch-kibana/#about-elasticsearch","title":"About Elasticsearch","text":"<p>Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease.</p>"},{"location":"examples/elasticsearch-kibana/#about-kibana","title":"About Kibana","text":"<p>Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps.</p>"},{"location":"examples/elasticsearch-kibana/#more-information-about-elasticsearch-kibana","title":"More information about Elasticsearch &amp; Kibana","text":"<ul> <li>Elasticsearch website</li> <li>Kibana website</li> <li>Elastic Docker Images</li> </ul>"},{"location":"examples/elasticsearch-kibana/#how-to-add-elasticsearch-to-qlico","title":"How to add Elasticsearch to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  elasticsearch9:\n    image: docker.elastic.co/elasticsearch/elasticsearch:9.2.0\n    container_name: qlico-core_elasticsearch9\n    logging:\n      driver: none\n    ports:\n      - 9209:9200\n    volumes:\n      - elasticsearch9-data/:/usr/share/elasticsearch/data\n    environment:\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    labels:\n      - \"traefik.http.routers.elasticsearch9.rule=Host(`elasticsearch9.qlico`)\"\n      - \"traefik.http.services.elasticsearch9.loadbalancer.server.port=9200\"\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  elasticsearch9-data:\n    name: qlico-core_elasticsearch9-data\n    driver: local\n</code></pre>"},{"location":"examples/elasticsearch-kibana/#how-to-add-kibana-to-qlico","title":"How to add Kibana to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file. Make sure you're running Elasticsearch!</p> qlico-core/docker-compose.yaml<pre><code>  kibana9:\n    image: docker.elastic.co/kibana/kibana:9.2.0\n    container_name: qlico-core_kibana9\n    logging:\n      driver: none\n    links:\n      - elasticsearch9\n    environment:\n      ELASTICSEARCH_URL: http://elasticsearch9:9200\n      ELASTICSEARCH_HOSTS: '[\"http://elasticsearch9:9200\"]'\n    labels:\n      - \"traefik.http.routers.kibana9.rule=Host(`kibana9.qlico`)\"\n      - \"traefik.http.services.kibana9.loadbalancer.server.port=5601\"\n    networks:\n      - qlico-core\n</code></pre>"},{"location":"examples/elasticsearch-kibana/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Elasticsearch &amp; Kibana service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  elasticsearch9:\n    image: docker.elastic.co/elasticsearch/elasticsearch:9.2.0\n    container_name: qlico-core_elasticsearch9\n    logging:\n      driver: none\n    ports:\n      - 9209:9200\n    volumes:\n      - elasticsearch9-data/:/usr/share/elasticsearch/data\n    environment:\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    labels:\n      - \"traefik.http.routers.elasticsearch9.rule=Host(`elasticsearch9.qlico`)\"\n      - \"traefik.http.services.elasticsearch9.loadbalancer.server.port=9200\"\n    networks:\n      - qlico-core\n  kibana9:\n    image: docker.elastic.co/kibana/kibana:9.2.0\n    container_name: qlico-core_kibana9\n    logging:\n      driver: none\n    links:\n      - elasticsearch9\n    environment:\n      ELASTICSEARCH_URL: http://elasticsearch9:9200\n      ELASTICSEARCH_HOSTS: '[\"http://elasticsearch9:9200\"]'\n    labels:\n      - \"traefik.http.routers.kibana9.rule=Host(`kibana9.qlico`)\"\n      - \"traefik.http.services.kibana9.loadbalancer.server.port=5601\"\n    networks:\n      - qlico-core\n\nvolumes:\n  elasticsearch9-data:\n    name: qlico-core_elasticsearch9-data\n    driver: local\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/mailpit/","title":"Mailpit configuration example","text":""},{"location":"examples/mailpit/#about-mailpit","title":"About Mailpit","text":"<p>Mailpit is a small, fast, low memory, zero-dependency, multi-platform email testing tool &amp; API for developers.</p> <p>It acts as an SMTP server, provides a modern web interface to view &amp; test captured emails, and contains an API for automated integration testing.</p>"},{"location":"examples/mailpit/#more-information-about-mailpit","title":"More information about Mailpit","text":"<ul> <li>Mailpit website</li> <li>Mailpit GitHub project</li> <li>Mailpit on Docker Hub</li> </ul>"},{"location":"examples/mailpit/#how-to-add-mailpit-to-qlico","title":"How to add Mailpit to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  mailpit:\n    image: axllent/mailpit:v1.27\n    container_name: qlico-core_mailpit\n    restart: always\n    volumes:\n      - mailpit-data:/data\n    ports:\n      - 8025:8025\n      - 1025:1025\n    environment:\n      MP_MAX_MESSAGES: 5000\n      MP_DATA_FILE: /data/mailpit.db\n      MP_SMTP_AUTH_ACCEPT_ANY: 1\n      MP_SMTP_AUTH_ALLOW_INSECURE: 1\n    labels:\n      - \"traefik.http.routers.mailpit.rule=Host(`mailpit.qlico`)\"\n      - \"traefik.http.services.mailpit.loadbalancer.server.port=8025\"\n    networks:\n      - qlico-core\n</code></pre>"},{"location":"examples/mailpit/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Mailpit service.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  mailpit:\n    image: axllent/mailpit:v1.27\n    container_name: qlico-core_mailpit\n    restart: always\n    volumes:\n      - mailpit-data:/data\n    ports:\n      - 8025:8025\n      - 1025:1025\n    environment:\n      MP_MAX_MESSAGES: 5000\n      MP_DATA_FILE: /data/mailpit.db\n      MP_SMTP_AUTH_ACCEPT_ANY: 1\n      MP_SMTP_AUTH_ALLOW_INSECURE: 1\n    labels:\n      - \"traefik.http.routers.mailpit.rule=Host(`mailpit.qlico`)\"\n      - \"traefik.http.services.mailpit.loadbalancer.server.port=8025\"\n    networks:\n      - qlico-core\n\nvolumes:\n  mailpit-data:\n    name: qlico-core_mailpit-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/minio/","title":"MinIO configuration example","text":""},{"location":"examples/minio/#about-minio","title":"About MinIO","text":"<p>MinIO is a high performance, distributed object storage system. It is software-defined, runs on industry standard hardware and is 100% open source with the dominant license being GNU AGPL v3.</p>"},{"location":"examples/minio/#more-information-about-minio","title":"More information about MinIO","text":"<ul> <li>MinIO website</li> <li>MinIO on Docker Hub</li> </ul>"},{"location":"examples/minio/#how-to-add-minio-to-qlico","title":"How to add MinIO to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  minio:\n    image: minio/minio:RELEASE.2025-04-22T22-12-26Z\n    container_name: qlico-core_minio\n    command: server /export\n    environment:\n      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-qlicorocks}\n      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-qlicorocks}\n    volumes:\n      - minio-data:/export\n    networks:\n      - qlico-core\n    labels:\n      - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\"\n      - \"traefik.http.services.minio.loadbalancer.server.port=9000\"\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  minio-data:\n    name: qlico-core_minio-data\n    driver: local\n</code></pre>"},{"location":"examples/minio/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the MinIO service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  minio:\n    image: minio/minio:RELEASE.2025-04-22T22-12-26Z\n    container_name: qlico-core_minio\n    command: server /export\n    environment:\n      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-qlicorocks}\n      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-qlicorocks}\n    volumes:\n      - minio-data:/export\n    networks:\n      - qlico-core\n    labels:\n      - \"traefik.http.routers.minio.rule=Host(`minio.qlico`)\"\n      - \"traefik.http.services.minio.loadbalancer.server.port=9000\"\n\nvolumes:\n  minio-data:\n    name: qlico-core_minio-data\n    driver: local\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/mysql/","title":"MySQL configuration example","text":""},{"location":"examples/mysql/#about-mysql","title":"About MySQL","text":"<p>MySQL is the world's most popular open source database. Whether you are a fast-growing web property, technology ISV or large enterprise, MySQL can cost-effectively help you deliver high performance, scalable database applications.</p>"},{"location":"examples/mysql/#more-information-about-mysql","title":"More information about MySQL","text":"<ul> <li>MySQL website</li> <li>MySQL on Docker Hub</li> </ul>"},{"location":"examples/mysql/#how-to-add-mysql-9-to-qlico","title":"How to add MySQL 9 to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  mysql9:\n    image: mysql:9.5.0\n    container_name: qlico-core_mysql9\n    restart: unless-stopped\n    logging:\n      driver: none\n    ports:\n      - 3309:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - mysql-data9:/var/lib/mysql\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  mysql-data9:\n    name: qlico-core_mysql9-data\n    driver: local\n</code></pre>"},{"location":"examples/mysql/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the MySQL service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  mysql9:\n    image: mysql:9.5.0\n    container_name: qlico-core_mysql9\n    restart: unless-stopped\n    logging:\n      driver: none\n    ports:\n      - 3309:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - mysql-data9:/var/lib/mysql\n    networks:\n      - qlico-core\n\nvolumes:\n  mysql-data9:\n    name: qlico-core_mysql9-data\n    driver: local\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/mysql/#how-to-add-mysql-8-to-qlico","title":"How to add MySQL 8 to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  mysql8:\n    image: mysql:8.0.44\n    container_name: qlico-core_mysql8\n    restart: unless-stopped\n    logging:\n      driver: none\n    ports:\n      - 3308:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - mysql-data8:/var/lib/mysql\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  mysql-data8:\n    name: qlico-core_mysql8-data\n    driver: local\n</code></pre>"},{"location":"examples/mysql/#example-in-a-full-docker-compose-file_1","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the MySQL service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  mysql8:\n    image: mysql:8.0.44\n    container_name: qlico-core_mysql8\n    restart: unless-stopped\n    logging:\n      driver: none\n    ports:\n      - 3308:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - mysql-data8:/var/lib/mysql\n    networks:\n      - qlico-core\n\nvolumes:\n  mysql-data8:\n    name: qlico-core_mysql8-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/percona/","title":"Percona configuration examples","text":""},{"location":"examples/percona/#about-percona","title":"About Percona","text":"<p>More enterprises rely on MySQL\u00ae performance, resilience and security to power the applications and websites that make achieving their business goals possible.</p> <p>Percona Server for MySQL\u00ae is a free, fully compatible, enhanced and open source drop-in replacement for any MySQL database. It provides superior performance, scalability and instrumentation.</p>"},{"location":"examples/percona/#more-information-about-percona","title":"More information about Percona","text":"<ul> <li>Percona server website</li> <li>Percona server on Docker Hub</li> </ul>"},{"location":"examples/percona/#how-to-add-percona-to-qlico","title":"How to add Percona to Qlico?","text":""},{"location":"examples/percona/#how-to-add-percona-8-to-qlico","title":"How to add Percona 8 to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  percona8:\n    image: percona:8.0.43-34-centos\n    container_name: qlico-core_percona8\n    logging:\n      driver: none\n    ports:\n      - 3308:3306\n    environment:\n      MYSQL_USER: ${MYSQL_USERNAME:-root}\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - percona8-data:/var/lib/mysql\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  percona8-data:\n    name: qlico-core_percona8-data\n    driver: local\n</code></pre>"},{"location":"examples/percona/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Percona service(s) and volume(s).</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  percona8:\n    image: percona:8.0.43-34-centos\n    container_name: qlico-core_percona8\n    logging:\n      driver: none\n    ports:\n      - 3308:3306\n    environment:\n      MYSQL_USER: ${MYSQL_USERNAME:-root}\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-qlico}\n    volumes:\n      - percona8-data:/var/lib/mysql\n    networks:\n      - qlico-core\n\nvolumes:\n  percona8-data:\n    name: qlico-core_percona8-data\n    driver: local\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/pgadmin/","title":"pgAdmin Example","text":""},{"location":"examples/pgadmin/#about-pgadmin","title":"About pgAdmin","text":"<p>pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.</p>"},{"location":"examples/pgadmin/#more-information-about-pgadmin","title":"More information about pgAdmin","text":"<ul> <li>pgAdmin website</li> <li>pgAdmin on Docker Hub</li> </ul>"},{"location":"examples/pgadmin/#how-to-add-pgadmin-to-qlico","title":"How to add pgAdmin to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  pgadmin4:\n    image: dpage/pgadmin4:latest\n    container_name: qlico-core_pgadmin\n    environment:\n      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico}\n      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-qlico}\n    volumes:\n      - pgadmin4-data:/root/.pgadmin\n    labels:\n      - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\"\n      - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\"\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  pgadmin4-data:\n    name: qlico-core_pgadmin4-data\n</code></pre> <p>This is a large example, so you know where to place the pgAdmin service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  pgadmin4:\n    image: dpage/pgadmin4:latest\n    container_name: qlico-core_pgadmin\n    environment:\n      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.qlico}\n      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-qlico}\n    volumes:\n      - pgadmin4-data:/root/.pgadmin\n    labels:\n      - \"traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.qlico`)\"\n      - \"traefik.http.services.pgadmin4.loadbalancer.server.port=80\"\n    networks:\n      - qlico-core\n\nvolumes:\n  pgadmin4-data:\n    name: qlico-core_pgadmin4-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/postgresql/","title":"PostgreSQL configuration Example","text":""},{"location":"examples/postgresql/#about-postgresql","title":"About PostgreSQL","text":"<p>PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.</p>"},{"location":"examples/postgresql/#more-information-about-postgresql","title":"More information about PostgreSQL","text":"<ul> <li>PostgreSQL website</li> <li>PostgreSQL on Docker Hub</li> </ul>"},{"location":"examples/postgresql/#how-to-add-postgresql-18-to-qlico","title":"How to add PostgreSQL 18 to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  postgres18:\n    image: postgres:18\n    container_name: qlico-core_postgres18\n    logging:\n      driver: none\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qlico}\n    volumes:\n      - postgres18-data:/var/lib/postgresql/data\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  postgres18-data:\n    name: qlico-core_postgres18-data\n</code></pre>"},{"location":"examples/postgresql/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the PostgreSQL service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  postgres18:\n    image: postgres:18\n    container_name: qlico-core_postgres18\n    logging:\n      driver: none\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qlico}\n    volumes:\n      - postgres18-data:/var/lib/postgresql/data\n    networks:\n      - qlico-core\n\nvolumes:\n  postgres18-data:\n    name: qlico-core_postgres18-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/postgresql/#how-to-add-postgresql-17-to-qlico","title":"How to add PostgreSQL 17 to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  postgres17:\n    image: {{ no such element: super_collections.SuperDict object['postgres17'] }}\n    container_name: qlico-core_postgres17\n    logging:\n      driver: none\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qlico}\n    volumes:\n      - postgres17-data:/var/lib/postgresql/data\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  postgres17-data:\n    name: qlico-core_postgres17-data\n</code></pre>"},{"location":"examples/postgresql/#example-in-a-full-docker-compose-file_1","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the PostgreSQL service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  postgres17:\n    image: {{ no such element: super_collections.SuperDict object['postgres17'] }}\n    container_name: qlico-core_postgres17\n    logging:\n      driver: none\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qlico}\n    volumes:\n      - postgres17-data:/var/lib/postgresql/data\n    networks:\n      - qlico-core\n\nvolumes:\n  postgres17-data:\n    name: qlico-core_postgres17-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/rabbitmq/","title":"RabbitMQ configuration example","text":""},{"location":"examples/rabbitmq/#about-rabbitmq","title":"About RabbitMQ","text":"<p>RabbitMQ is the most widely deployed open source message broker.</p> <p>RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</p>"},{"location":"examples/rabbitmq/#more-information-about-rabbitmq","title":"More information about RabbitMQ","text":"<ul> <li>RabbitMQ website</li> <li>RabbitMQ on Docker Hub</li> </ul>"},{"location":"examples/rabbitmq/#how-to-add-rabbitmq-to-qlico","title":"How to add RabbitMQ to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  rabbitmq4:\n    image: rabbitmq:4.2.0-management-alpine\n    container_name: qlico-core_rabbitmq4\n    ports:\n      - 5672:5672\n      - 15672:15672\n    volumes:\n      - rabbitmq4-data:/data/mnesia\n    labels:\n      - \"traefik.http.routers.rabbitmq4.rule=Host(`rabbitmq4.qlico`)\"\n      - \"traefik.http.services.rabbitmq4.loadbalancer.server.port=15672\"\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  rabbitmq4-data:\n    name: qlico-core_rabbitmq4-data\n</code></pre>"},{"location":"examples/rabbitmq/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the RabbitMQ service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  rabbitmq4:\n    image: rabbitmq:4.2.0-management-alpine\n    container_name: qlico-core_rabbitmq4\n    ports:\n      - 5672:5672\n      - 15672:15672\n    volumes:\n      - rabbitmq4-data:/data/mnesia\n    labels:\n      - \"traefik.http.routers.rabbitmq4.rule=Host(`rabbitmq4.qlico`)\"\n      - \"traefik.http.services.rabbitmq4.loadbalancer.server.port=15672\"\n    networks:\n      - qlico-core\n\nvolumes:\n  rabbitmq4-data:\n    name: qlico-core_rabbitmq4-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/redis/","title":"Redis Configuration example","text":""},{"location":"examples/redis/#about-redis","title":"About Redis","text":"<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p> <p>The name Redis means REmote DIctionary Server.</p>"},{"location":"examples/redis/#more-information-about-redis","title":"More information about Redis","text":"<ul> <li>Redis website</li> <li>Redis on Docker Hub</li> </ul>"},{"location":"examples/redis/#how-to-add-redis-to-qlico","title":"How to add Redis to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  redis:\n    image: redis:8.2.2-alpine\n    container_name: qlico-core_redis\n    ports:\n      - 6379:6379\n    volumes:\n      - redis-data:/data\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  redis-data:\n    name: qlico-core_redis-data\n</code></pre>"},{"location":"examples/redis/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Redis service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  redis:\n    image: redis:8.2.2-alpine\n    container_name: qlico-core_redis\n    ports:\n      - 6379:6379\n    volumes:\n      - redis-data:/data\n    networks:\n      - qlico-core\n\nvolumes:\n  redis-data:\n    name: qlico-core_redis-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"examples/valkey/","title":"Valkey Configuration example","text":""},{"location":"examples/valkey/#about-valkey","title":"About Valkey","text":"<p>Valkey is a high-performance data structure server that primarily serves key/value workloads. It supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns.</p> <p>The Valkey project was forked from the open source Redis project right before the transition to their new source available licenses.</p>"},{"location":"examples/valkey/#more-information-about-valkey","title":"More information about Valkey","text":"<ul> <li>Valkey website</li> <li>Valkey on Docker Hub</li> </ul>"},{"location":"examples/valkey/#how-to-add-valkey-to-qlico","title":"How to add Valkey to Qlico?","text":"<p>Add the following YAML to the <code>services</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  valkey:\n    image:  valkey/valkey:9.0.0-alpine\n    container_name: qlico-core_valkey\n    ports:\n      - 6379:6379\n    volumes:\n      - valkey-data:/data\n    networks:\n      - qlico-core\n</code></pre> <p>Add the following YAML to the <code>volumes</code> section of your <code>docker-compose.yaml</code> file.</p> qlico-core/docker-compose.yaml<pre><code>  valkey-data:\n    name: qlico-core_valkey-data\n</code></pre>"},{"location":"examples/valkey/#example-in-a-full-docker-compose-file","title":"Example in a full docker-compose file","text":"<p>This is a large example, so you know where to place the Valkey service and volume.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command: [\"--providers.docker\", \"--api.insecure\"]\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\n  valkey:\n    image:  valkey/valkey:9.0.0-alpine\n    container_name: qlico-core_valkey\n    ports:\n      - 6379:6379\n    volumes:\n      - valkey-data:/data\n    networks:\n      - qlico-core\n\nvolumes:\n  valkey-data:\n    name: qlico-core_valkey-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"usage/TLS-SSL/","title":"Using TLS/S","text":"<p>mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration.</p>"},{"location":"usage/TLS-SSL/#how-to-get-tlsssl-for-your-local-websites","title":"How to get TLS/SSL for your local websites?","text":"<p>In this example we will create a wildcard self signed certificated for <code>*.s.qlico</code>, you can change this if you want.</p> <p>First install mkcert</p> <p>After installing mkcert, go to the qlico-core folder and run the following commands</p> <pre><code>mkdir -p traefik/certs\ncd traefik/certs\nmkcert  \"*.s.qlico\"\nmkcert -install\n</code></pre> <p>Now let's create a Traefik configuration file for TLS: <code>traefik/tls.toml</code></p> qlico-core/traefik/tls.toml<pre><code>[tls]\n\n[tls.stores]\n\n[tls.stores.default]\n\n[tls.stores.default.defaultCertificate]\ncertFile = \"/configuration/certs/_wildcard.s.qlico.pem\"\nkeyFile = \"/configuration/certs/_wildcard.s.qlico-key.pem\"\n</code></pre> <p>Now change the <code>docker-compose.yaml</code> file inside Qlico core:</p> <p>Change the <code>command</code>, <code>ports</code>, <code>volumes</code> and <code>labels</code>.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  traefik:\n    image: traefik:v3.5.4\n    container_name: qlico-core_traefik\n    command:\n      - --providers.docker\n      - --api.insecure\n      - --entryPoints.web.address=:80\n      - --entryPoints.websecure.address=:443\n      - --api.insecure=true\n      - --api.dashboard=true\n      - --providers.file.filename=/configuration/tls.toml\n    networks:\n      - qlico-core\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik:/configuration\n    labels:\n      - \"traefik.http.routers.traefik.entrypoints=web,websecure\"\n      - \"traefik.http.routers.traefik.rule=Host(`traefik.qlico`) || Host(`traefik.s.qlico`)\"\n      - \"traefik.http.services.traefik.loadbalancer.server.port=8080\"\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre>"},{"location":"usage/TLS-SSL/#change-your-project-env","title":"Change your project <code>.env</code>","text":"<p>Make sure to change the <code>PROJECT_HOST</code> in the <code>.env</code> file inside your project.</p> qlico/.env<pre><code>PROJECT_HOST=example.s.qlico\n</code></pre>"},{"location":"usage/TLS-SSL/#in-your-project-change-the-docker-composeyaml","title":"In your project change the <code>docker-compose.yaml</code>","text":""},{"location":"usage/TLS-SSL/#nginx-default","title":"NGINX (default)","text":"qlico/docker-compose.yaml<pre><code># Author: Qlico &lt;hello@qlico.dev&gt;\n---\nservices:\n  nginx:\n    image: image: nginxinc/nginx-unprivileged:1.27-alpine3.21\n    container_name: ${PROJECT_NAME}_nginx\n    volumes:\n      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./services/nginx/mime.types:/etc/nginx/mime.types\n      - ../:/var/www/html\n      - php-socket:/php-socket\n    depends_on:\n      - php\n    labels:\n      # use this if you have multiple subdomains using this project\n      #kk- \"traefik.http.routers.${PROJECT_NAME}_nginx.rule=HostRegexp(`{subdomain:api|assets|www}.${PROJECT_HOST}`)\"\n      - \"traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOST}`)\"\n      - \"traefik.http.routers.${PROJECT_NAME}_nginx.tls=true\"\n      - \"traefik.http.services.${PROJECT_NAME}_nginx.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n  php:\n    build:\n      context: ../\n      target: dev\n    container_name: ${PROJECT_NAME}_php\n    volumes:\n      - ../:/var/www/html\n      - ~/.composer:/home/qlico/.composer\n      - php-socket:/php-socket\n    environment:\n      - PHP_IDE_CONFIG=serverName=${PROJECT_NAME}\n    networks:\n      - qlico-core\n    env_file:\n      - .env\n  nodejs:\n    build: services/nodejs\n    container_name: ${PROJECT_NAME}_nodejs\n    volumes:\n      - ../:/var/www/html:cached\n    networks:\n      - qlico-core\nvolumes:\n  php-socket:\n    driver: local\nnetworks:\n  qlico-core:\n    external: true\n    name: qlico-core\n</code></pre>"},{"location":"usage/TLS-SSL/#apache","title":"Apache","text":"qlico/docker-compose.yaml<pre><code># Author: Qlico &lt;hello@qlico.dev&gt;\n---\nservices:\n  apache2:\n    image: httpd:2.4.59-bookworm\n    container_name: ${PROJECT_NAME}_apache2\n    volumes:\n      - ./services/apache2/httpd.conf:/usr/local/apache2/conf/httpd.conf\n      - ../:/var/www/html\n      - php-socket:/php-socket\n    depends_on:\n      - php\n    labels:\n      # use this if you have multiple subdomains using this project\n      #- \"traefik.http.routers.${PROJECT_NAME}_apache2.rule=HostRegexp(`{subdomain:api|assets|www}.${PROJECT_HOST}`)\"\n      - \"traefik.http.routers.${PROJECT_NAME}_apache2.rule=Host(`${PROJECT_HOST}`)\"\n      - \"traefik.http.routers.${PROJECT_NAME}_apache2.tls=true\"\n      - \"traefik.http.services.${PROJECT_NAME}_apache2.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n  php:\n    build:\n      context: ../\n      target: dev\n    container_name: ${PROJECT_NAME}_php\n    volumes:\n      - ../:/var/www/html\n      - ~/.composer:/home/qlico/.composer\n      - php-socket:/php-socket\n    environment:\n      - PHP_IDE_CONFIG=serverName=${PROJECT_NAME}\n    networks:\n      - qlico-core\n    env_file:\n      - .env\n  nodejs:\n    build: services/nodejs\n    container_name: ${PROJECT_NAME}_nodejs\n    volumes:\n      - ../:/var/www/html:cached\n    networks:\n      - qlico-core\nvolumes:\n  php-socket:\n    driver: local\nnetworks:\n  qlico-core:\n    external: true\n    name: qlico-core\n</code></pre>"},{"location":"usage/TLS-SSL/#visit-your-project","title":"Visit your project","text":"<p>Open the browser: https://example.s.qlico</p>"},{"location":"usage/qlico-architecture/","title":"Qlico architecture","text":"<p> Click here for a larger image</p> <p>In this image we have a few services and projects running. You can run as many services and projects you want to run, in this example we're running 4 services and 3 projects.</p> <p>To get a good overview, all <code>docker-compose.yaml</code> files for all these services and projects are on this page.</p> <ul> <li>Qlico core</li> <li>A Symfony project</li> <li>A Laravel project</li> <li>A Go microservice</li> </ul>"},{"location":"usage/qlico-architecture/#qlico-core","title":"Qlico core","text":"<p>Qlico core with Traefik is the only neccessary service to run. Traefik is a reverse proxy, and is used to route HTTP traffic to the correct service. You are free to add more services to <code>qlico-core</code> if you want to.</p> <p>In example image we're running:</p> <ul> <li>Traefik</li> <li>Valkey</li> <li>Postgres</li> <li>RabbitMQ</li> </ul> <p>Since more than one project is using for example Valkey, Postgresql and RabbitMQ, we want to run these services in <code>qlico-core</code>.</p> qlico-core/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  valkey:\n    image:  valkey/valkey:9.0.0-alpine\n    container_name: qlico-core_valkey\n    ports:\n      - 6379:6379\n    volumes:\n      - valkey-data:/data\n    networks:\n      - qlico-core\n  postgres17:\n    image: {{ no such element: super_collections.SuperDict object['postgres17'] }}\n    container_name: qlico-core_postgres17\n    logging:\n      driver: none\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qlico}\n    volumes:\n      - postgres17-data:/var/lib/postgresql/data\n    networks:\n      - qlico-core\n  rabbitmq4:\n    image: rabbitmq:4.2.0-management-alpine\n    container_name: qlico-core_rabbitmq4\n    ports:\n      - 5672:5672\n      - 15672:15672\n    volumes:\n      - rabbitmq4-data:/data/mnesia\n    labels:\n      - \"traefik.http.routers.rabbitmq4.rule=Host(`rabbitmq4.qlico`)\"\n      - \"traefik.http.services.rabbitmq4.loadbalancer.server.port=15672\"\n    networks:\n      - qlico-core\n\nvolumes:\n  valkey-data:\n    name: qlico-core_valkey-data\n  postgres17-data:\n    name: qlico-core_postgres17-data\n\nnetworks:\n  qlico-core:\n    driver: bridge\n    name: qlico-core\n</code></pre> <p>From our host machine where Docker is running we can connect to:</p> <ul> <li>Traefik: <code>http://localhost:80</code></li> <li>Valkey: <code>localhost:6379</code></li> <li>Postgresql: <code>localhost:5432</code></li> <li>RabbitMQ: <code>localhost:5672</code> or the web interface: <code>http://rabbitmq4.qlico</code></li> </ul> <p>From the projects running (in Docker) we can access everything by the <code>service</code> name:</p> <ul> <li>Traefik (is not needed, since it's a reverse proxy)</li> <li>Valkey: <code>valkey:6379</code></li> <li>Postgresql: <code>postgres17:5432</code></li> <li>RabbitMQ: <code>rabbitmq4:5672</code> (the webinterface is not needed for applications)</li> </ul>"},{"location":"usage/qlico-architecture/#a-symfony-project","title":"A Symfony project","text":"a-symfony-project/qlico/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\nservices:\n  nginx:\n    image: nginxinc/nginx-unprivileged:1.27-alpine3.21\n    container_name: ${PROJECT_NAME}_nginx\n    volumes:\n      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./services/nginx/mime.types:/etc/nginx/mime.types\n      - ../:/var/www/html\n      - php-socket:/php-socket\n    depends_on:\n      - php\n    labels:\n      - \"traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOST}`)\"\n      - \"traefik.http.services.${PROJECT_NAME}_nginx.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n\n  php:\n    build:\n      context: ../\n      target: dev\n    container_name: ${PROJECT_NAME}_php\n    volumes:\n      - ../:/var/www/html\n      - ~/.composer:/home/qlico/.composer\n      - php-socket:/php-socket\n    environment:\n      - PHP_IDE_CONFIG=serverName=${PROJECT_NAME}\n    networks:\n      - qlico-core\n    env_file:\n      - .env\n\nvolumes:\n  php-socket:\n    driver: local\n\nnetworks:\n  qlico-core:\n    external: true\n    name: qlico-core\n</code></pre>"},{"location":"usage/qlico-architecture/#the-env-file-from-this-symfony-project","title":"The <code>.env</code> file from this Symfony project","text":"<p>This is a small example, the actual <code>.env</code> file is larger</p> a-symfony-project/qlico/.env<pre><code>PROJECT_NAME=a-symfony-project\nPROJECT_HOST=a-symfony-project.qlico\nCOMPOSE_PROJECT_NAME=a-symfony-project\n</code></pre> <p>We're not using the <code>.env</code> in the root of the project.</p>"},{"location":"usage/qlico-architecture/#connecting-to-services","title":"Connecting to services","text":"<p>To connect to services running in <code>qlico-core</code> we're using: These are inside the projects <code>.env</code> file:</p> a-symfony-project/.env<pre><code>DATABASE_URL=\"postgresql://postgres:qlico@postgres17:5432/a-symfony-project?serverVersion=17&amp;charset=utf8\"\nREDIS_DSN=\"redis://valkey:6379\"\n</code></pre> <p>If we want to access the Symfony project in a webbrowser: http://a-symfony-project.qlico</p> <p>Debugging with Xdebug? The project name is <code>a-symfony-project</code>.</p>"},{"location":"usage/qlico-architecture/#a-laravel-project","title":"A Laravel project","text":"a-laravel-project/qlico/docker-compose.yaml<pre><code>---\n# Author: Qlico &lt;hello@qlico.dev&gt;\n---\nservices:\n  nginx:\n    image: nginxinc/nginx-unprivileged:1.25.5-alpine3.19\n    container_name: ${PROJECT_NAME}_nginx\n    volumes:\n      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./services/nginx/mime.types:/etc/nginx/mime.types\n      - ../:/var/www/html\n      - php-socket:/php-socket\n    depends_on:\n      - php\n    labels:\n      - \"traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOST}`)\"\n      - \"traefik.http.services.${PROJECT_NAME}_nginx.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n\n  php:\n    build:\n      context: ../\n      target: dev\n    container_name: ${PROJECT_NAME}_php\n    volumes:\n      - ../:/var/www/html\n      - ~/.composer:/home/qlico/.composer\n      - php-socket:/php-socket\n    environment:\n      - PHP_IDE_CONFIG=serverName=${PROJECT_NAME}\n    networks:\n      - qlico-core\n    env_file:\n      - .env\n\nvolumes:\n  php-socket:\n    driver: local\n\nnetworks:\n  qlico-core:\n    external: true\n    name: qlico-core\n</code></pre>"},{"location":"usage/qlico-architecture/#the-env-file-from-this-laravel-project","title":"The <code>.env</code> file from this Laravel project","text":"<p>This is a small example, the actual <code>.env</code> file is larger</p> a-laravel-project/qlico/.env<pre><code>PROJECT_NAME=a-laravel-project\nPROJECT_HOST=a-laravel-project.qlico\nCOMPOSE_PROJECT_NAME=a-laravel-project\n</code></pre> <p>We're not using the <code>.env</code> in the root of the project.</p>"},{"location":"usage/qlico-architecture/#connecting-to-services_1","title":"Connecting to services","text":"<p>To connect to services running in <code>qlico-core</code> we're using: These are inside the projects <code>.env</code> file:</p> a-laravel-project/.env<pre><code>DATABASE_URL=\"pgsql://postgres:qlico@postgres17:5432/a-laravel-project?charset=utf8\"\nRABBITMQ_DSN=\"redis://valkey:6379\"\nQUEUE_CONNECTION=\"rabbitmq\"\nRABBITMQ_HOST=\"rabbitmq3\"\nRABBITMQ_PASSWORD=\"guest\"\nRABBITMQ_USERNAME=\"guest\"\nRABBITMQ_VHOST=\"my-distributed-queue\"\n</code></pre> <p>If we want to access the Laravel project in a webbrowser: http://a-laravel-project.qlico</p> <p>Debugging with Xdebug? The project name is <code>a-laravel-project</code>.</p>"},{"location":"usage/qlico-architecture/#the-difference-between-the-symfony-and-laravel-project","title":"The difference between the Symfony and Laravel project","text":"<p>It's a small difference, but Laravel is using RabbitMQ for the queue connection and Symfony is using Valkey for the cache connection. Both are using Postgresql for the database connection.</p> <p>But the <code>qlico/docker-compose.yaml</code> files are identical. This makes it easy to switch between projects, or to add more projects.</p> <p>The Dockerfiles can be different (for example different PHP versions). This gives you the flexibility to use the PHP version you want to use, and use different PHP extensions.</p>"},{"location":"usage/qlico-architecture/#a-go-microservice","title":"A Go microservice","text":"<p>If you want to run a Go microservice, you can use the same <code>qlico/docker-compose.yaml</code>, but this could also be for example a Spring Boot application, Ruby, Python or any other project.</p> a-go-microservice/qlico/docker-compose.yaml<pre><code># Author: Qlico &lt;hello@qlico.dev&gt;\n---\nservices:\n  a-go-microservice:\n    build:\n      context: ../\n    container_name: ${PROJECT_NAME}_go\n    depends_on:\n      - php\n    labels:\n      - \"traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOST}`)\"\n      - \"traefik.http.services.${PROJECT_NAME}_nginx.loadbalancer.server.port=8080\"\n    networks:\n      - qlico-core\n\nnetworks:\n  qlico-core:\n    external: true\n    name: qlico-core\n</code></pre>"},{"location":"usage/qlico-architecture/#the-env-file-from-this-go-microservice","title":"The <code>.env</code> file from this Go microservice","text":"a-go-microservice/qlico/.env<pre><code>PROJECT_NAME=a-go-microservice\nPROJECT_HOST=a-go-microservice.qlico\nCOMPOSE_PROJECT_NAME=a-go-microservice\n</code></pre> <p>We're not using the <code>.env</code> in the root of the project.</p>"},{"location":"usage/qlico-architecture/#connecting-to-services_2","title":"Connecting to services","text":"<p>To connect to services running in <code>qlico-core</code> we're using: These are inside the projects <code>.env</code> file:</p> a-go-microservice/.env<pre><code>REDIS_DSN=redis://valkey:6379\nRABBITMQ_DSN=amqp://guest:guest@rabbitmq4:5672/my-distributed-queue\n</code></pre> <p>The Go microservice is using Valkey for the cache connection and RabbitMQ for the queue connection. But it could also be using Postgresql for the database, if needed.</p> <p>If we want to access the Go microservice project in a webbrowser: http://a-go-microservice.qlico</p>"},{"location":"usage/qlico-cli/","title":"Qlico CLI","text":"<p>Qlico CLI is a shell script which makes it easier to work with your containers, projects and Qlico core.</p>"},{"location":"usage/qlico-cli/#setup","title":"Setup","text":"<p>Copy the qlico shell script to your local bin directory. This way you can easily name it to your liking and make personal   adjustments if needed. Also make sure the script is executable:</p> <pre><code>cp ~/qlico-core/qlico ~/.local/bin/\nchmod u+x ~/.local/bin/qlico\n</code></pre> <p>Of course adjust the above commands if your directories are located elsewhere.</p>"},{"location":"usage/qlico-cli/#directory-settings","title":"Directory settings","text":"<p>Optionaly you can change the directory settings where qlico core is located and where your projects are:</p> ~/.local/bin/qlico<pre><code>#!/bin/bash\n\nQLICO_CORE_DIR=~/qlico-core\nQLICO_PROJECTS_DIR=~/qlico-core/projects\n---\n</code></pre> <p>By convention <code>php</code> is used as the php container name and <code>nodejs</code> as the node.js container name for each project. If for some reason you prefer to use other names, you can change these as well. Make sure you always use these names in each of your projects.</p> ~/.local/bin/qlico<pre><code>---\nQLICO_PHP=php\nQLICO_NODEJS=nodejs\n---\n</code></pre>"},{"location":"usage/qlico-cli/#usage","title":"Usage","text":"<pre><code>qlico &lt;project&gt; &lt;command&gt; [arguments]\n</code></pre> <p>The qlico script should always be followed by the name of the directory in the QLICO_PROJECTS_DIR where your project resides. The name <code>core</code> is reserved and is meant to execute commands on the Qlico core stack.</p>"},{"location":"usage/qlico-cli/#common-commands","title":"Common commands","text":"<p>These commands are available for all projects and core containers. All commands can be followed by container names if you want to apply the command for specific containers.</p>"},{"location":"usage/qlico-cli/#build","title":"build","text":"<p>Build all of the images or the specified one(s):</p> <pre><code># build all images in my-project\nqlico my-project build\n\n# build only the php and nodejs images in my-project\nqlico my-project build php nodejs\n</code></pre>"},{"location":"usage/qlico-cli/#destroy","title":"destroy","text":"<p>Remove the entire Docker environment. All containers, images and volumes will be deleted! Useful if you want to purge your project. Use with caution, confirmation will be asked.</p> <pre><code>qlico my-project destroy\n</code></pre>"},{"location":"usage/qlico-cli/#down","title":"down","text":"<p>Stop and destroy all containers.</p> <pre><code>qlico my-project down\n</code></pre>"},{"location":"usage/qlico-cli/#logs","title":"logs","text":"<p>Display and tail the logs of all containers or the specified one's.</p> <pre><code>qlico my-project logs\n</code></pre>"},{"location":"usage/qlico-cli/#refresh","title":"refresh","text":"<p>Shortcut for stopping and starting all containers.</p> <pre><code>qlico my-project refresh\n</code></pre>"},{"location":"usage/qlico-cli/#restart","title":"restart","text":"<p>Restart the containers.</p> <pre><code>qlico my-project restart\n</code></pre>"},{"location":"usage/qlico-cli/#stop","title":"stop","text":"<p>Stop the containers.</p> <pre><code>qlico my-project stop\n</code></pre>"},{"location":"usage/qlico-cli/#up","title":"up","text":"<p>Start the containers.</p> <pre><code>qlico my-project up\n</code></pre>"},{"location":"usage/qlico-cli/#php-container-commands","title":"PHP container commands","text":"<p>These commands are only available for the QLICO_PHP containers.</p>"},{"location":"usage/qlico-cli/#artisan","title":"artisan","text":"<p>Run a Laravel artisan command</p> <pre><code>qlico laravel-project artisan make:command SendEmails\n</code></pre>"},{"location":"usage/qlico-cli/#composer","title":"composer","text":"<p>Run a Composer command.</p> <pre><code>qlico my-project composer install\n</code></pre>"},{"location":"usage/qlico-cli/#console","title":"console","text":"<p>Run a Symfony console command.</p> <pre><code>qlico symfony-project console config:dump-reference framework\n</code></pre>"},{"location":"usage/qlico-cli/#run","title":"run","text":"<p>Run a command within the php container. This can be any executable available in the container.</p> <pre><code>qlico my-project run bin/my-shell-script\nqlico my-project run php vendor/bin/ecs check src/Controller --fix\nqlico my-project run ls -lR\n</code></pre>"},{"location":"usage/qlico-cli/#xphp","title":"xphp","text":"<p>Run a php command with Xdebug enabled. For more info on Xdebug, see: Usage/Debugging with Xdebug</p> <pre><code>qlico symfony-project xphp bin/console app:my-debug-command\n</code></pre>"},{"location":"usage/qlico-cli/#nodejs-container-commands","title":"Node.js container commands","text":"<p>These commands are only available for the QLICO_NODEJS containers.</p>"},{"location":"usage/qlico-cli/#npm","title":"npm","text":"<p>Run a NPM command.</p> <pre><code>qlico my-project npm init -y\n</code></pre>"},{"location":"usage/qlico-cli/#yarn","title":"yarn","text":"<p>Run a Yarn command</p> <pre><code>qlico my-project yarn upgrade\n</code></pre>"},{"location":"usage/qlico-cli/#tips","title":"Tips","text":"<p>If you use one or more projects frequently, register an alias to save you some typing:</p> <pre><code># without alias\nqlico my-awesome-super-project composer update\n# with alias masp=\"qlico my-awesome-super-project\"\nmasp composer update\n</code></pre>"},{"location":"usage/xdebug/","title":"Debugging with Xdebug","text":""},{"location":"usage/xdebug/#what-is-xdebug","title":"What is Xdebug?","text":"<p>Xdebug is an extension for PHP, and provides a range of features to improve the PHP development experience.</p>"},{"location":"usage/xdebug/#step-debugging","title":"Step Debugging","text":"<p>A way to step through your code in your IDE or editor while the script is executing.</p>"},{"location":"usage/xdebug/#improvements-to-phps-error-reporting","title":"Improvements to PHP's error reporting","text":"<p>An improved var_dump() function, stack traces for Notices, Warnings, Errors and Exceptions to highlight the code path to the error.</p>"},{"location":"usage/xdebug/#configure-qlico-in-your-project-to-use-xdebug","title":"Configure Qlico in your project to use Xdebug","text":"<p>Qlico in \"dev\" stage (default) supports debugging using Xdebug. You can check if it's enabled with <code>phpinfo();</code> </p> <p>Make sure that in your <code>qlico/.env</code> file the following values are filled:</p> <p><code>PROJECT_NAME=unique-project-name</code> this should be an unique project name, if you have multiple projects with the same name (for example <code>api</code> and <code>frontend</code>) name your projects: <code>project-api</code> and <code>project-frontend</code>. If these names are not unique, you will not be able to debug multiple projects at the same time.</p> <p><code>XDEBUG_MODE=develop,debug</code> this setting controls which Xdebug features are enabled. More information about the different modes</p> <p><code>XDEBUG_CLIENT_HOST</code> for macOS users this should be: <code>host.docker.internal</code></p> <p>If you're running Linux, you can run and copy the output:</p> <pre><code>ip addr show docker0 | grep \"inet\\b\" | awk '{print $2}' | cut -d/ -f1\n</code></pre> <p>For example: <code>XDEBUG_CLIENT_HOST=172.17.0.1</code></p>"},{"location":"usage/xdebug/#full-working-example-of-env-file","title":"Full working example of <code>.env</code> file","text":".env<pre><code>PROJECT_NAME=xdebug-example\nXDEBUG_MODE=develop,debug\nXDEBUG_CLIENT_HOST=host.docker.internal\n</code></pre>"},{"location":"usage/xdebug/#configure-your-ide","title":"Configure your IDE","text":"<ul> <li>PhpStorm</li> <li>Visual Studio Code</li> </ul>"},{"location":"usage/xdebug/#phpstorm","title":"PhpStorm","text":"<p>These instructions also work for IntelliJ IDEA.</p>"},{"location":"usage/xdebug/#open-the-project-settings-and-go-to-php-debug-make-sure-that-the-debug-port-is-90039000","title":"Open the Project settings and go to: <code>PHP</code> -&gt; <code>Debug</code>, make sure that the Debug port is: <code>9003,9000</code>","text":""},{"location":"usage/xdebug/#next-to-go-php-servers","title":"Next to go: PHP -&gt; Servers","text":"<p>Name: <code>xdebug-example</code> Important: This name MUST match the <code>PROJECT_NAME</code> in your <code>.env</code> file. Host: <code>localhost</code> Check: \"Use path mappings (select if the server is remote or symlinks are used)\", since we're using a \"remote\" Docker container. Absolute path on the server: <code>/var/www/html</code></p> <p></p>"},{"location":"usage/xdebug/#click-start-listening-for-php-debug-connections-in-the-main-toolbar","title":"Click: \"Start listening for PHP Debug Connections\" (in the Main toolbar)","text":"<p>After you've clicked the button, the \"red\" light should be \"green\" </p>"},{"location":"usage/xdebug/#set-a-breakpoint-somewhere-in-your-code","title":"Set a breakpoint somewhere in your code","text":"<p>For more information about breakpoints in PhpStorm, click here.</p>"},{"location":"usage/xdebug/#open-your-project-in-a-browser","title":"Open your project in a browser","text":"<p>In my example: Visiting <code>http://xdebug-example.qlico</code></p>"},{"location":"usage/xdebug/#profit","title":"Profit","text":"<p>PhpStorm will automatically open up, with Debug information </p> <p>As you can see at the bottom of the screen: There is a debugger attached.</p>"},{"location":"usage/xdebug/#more-information-about-using-debugging-in-phpstorm","title":"More information about using Debugging in PhpStorm","text":"<ul> <li>Debug tool window</li> <li>Step through the program</li> </ul>"},{"location":"usage/xdebug/#visual-studio-code","title":"Visual Studio Code","text":"<p>To enable debugging in Visual Studio Code, please install the PHP Debug plugin by Xdebug first.</p> <p>A small note on the plugin: This plugin does not support multiple debugging sessions at the same time. See this GitHub issue for more information: Multiple debugging sessions</p> <p>After installation, in your project open: <code>.vscode/launch.json</code></p> <p>And add the following snippet:</p> .vscode/launch.json<pre><code>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Listen for Xdebug\",\n            \"type\": \"php\",\n            \"request\": \"launch\",\n            \"hostname\": \"0.0.0.0\",\n            \"port\": 9003,\n            \"pathMappings\": {\n                \"/var/www/html\": \"${workspaceFolder}\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"usage/xdebug/#how-to-start-a-debug-session","title":"How to start a debug session","text":""},{"location":"usage/xdebug/#go-to-run-start-debugging","title":"Go to Run: \"Start debugging\"","text":""},{"location":"usage/xdebug/#add-a-breakpoint-in-vscode","title":"Add a breakpoint in VSCode","text":""},{"location":"usage/xdebug/#open-your-project-in-a-browser_1","title":"Open your project in a browser","text":"<p>In my example: Visiting <code>http://xdebug-example.qlico</code></p>"},{"location":"usage/xdebug/#profit_1","title":"Profit","text":"<p>In Visual Studio Code </p> <p>As you can see at the left of the screen: There is a debugger attached.</p>"},{"location":"usage/xdebug/#debugging-cli-scripts","title":"Debugging CLI scripts","text":"<p>If you want to debug a CLI PHP Script, please use the alias: <code>xphp</code> inside the running PHP Container</p> <p>For example:</p> <pre><code>docker compose exec php ash\n</code></pre> <p><pre><code>xphp index.php\n</code></pre> This is also possible with Symfony and Laravel commands. <pre><code># Symfony\nxphp bin/console app:command\n\n# Laravel\nxphp artisan app:command\n</code></pre></p> <p>It's the same process for PhpStorm and Visual Studio Code, make sure to set it up first. Now PhpStorm or Visual Studio Code will open. By default, the <code>php</code> alias inside Qlico do not have Xdebug enabled, because this can give side effects, for example when running <code>composer install</code>.</p>"}]}